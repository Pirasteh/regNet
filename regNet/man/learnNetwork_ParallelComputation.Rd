% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learnNetwork_ParallelComputation.R
\name{learnNetwork_ParallelComputation}
\alias{learnNetwork_ParallelComputation}
\title{Network inference module: Learn regulatory network}
\usage{
learnNetwork_ParallelComputation(data, networkName, cores, job, path,
  nfolds = 10, cvReplicates = 10, output = TRUE)
}
\arguments{
\item{data}{Data set containing gene expression and gene copy number profiles for network inference}

\item{networkName}{Name of the network}

\item{cores}{Fixed number of sub-network inference problems}

\item{job}{Sub-network inference problem to be solved}

\item{path}{Project path}

\item{nfolds}{Number of sub-samples considered in the cross-validation step used to determine an optimal lambda for a specific gene. Default: 10}

\item{cvReplicates}{Number of repeats of nfold-cross-validations used to determine an optimal lambda for a specific gene. Default: 10}

\item{output}{Show progress information. Default: TRUE}
}
\value{
Saves sub-network and cross-validation statistics files. Adds runtime entry to global runtime table. See output for details.
}
\description{
This function provides the basics for the inference of a regulatory network from the given data set (data). Network inference is usually very time consuming and therefore separated into independent sub-network inference problems (cores). Thus, this function learns putative regulators for all genes covered by the specific sub-network inference problem (job). Genes coverd by the job-specific sub-network inference problem are given by range[ job ] + 1 ... range[ job + 1 ] specified by \code{\link{getComputationRange}}. All individual job-specific sub-network inferrence problems (job from 1 to cores) can be solved in parallel or step-by-step depending on the available hardware. The global regulatory network can be constructed using \code{\link{combineSingleJobs}} after all sub-network inference problems have been solved.
}
\examples{

#
#Solve the sub-network inference problems for a given data set. The following toy example does the network inference sequentially within some minutes. For large data sets, network inference should be done on a compute server with parallel execution of individual \\code{learnNetwork_ParallelComputation} calls.
#

#Load data set
data = loadGeneExpressionAndCopyNumberDataSet( geneExpressionFile = "AS_SignatureTFs_ExpressionLevels.txt", geneCopyNumberFile = "AS_SignatureTFs_CopyNumbers", path = "/home/seifert/regNet/AstrocytomaGrades/Data/" )

#Creater basic folder structure
projectPath = createBasicFolderStructure( projectName = "MyFirstNetwork", path = "/home/seifert/regNet/AstrocytomaGrades/" )

#Solve individual sub-network inference problems
learnNetwork_ParallelComputation( data = data, networkName = "AS_SignatureTFs", cores = 4, job = 1, path = projectPath )
learnNetwork_ParallelComputation( data = data, networkName = "AS_SignatureTFs", cores = 4, job = 2, path = projectPath )
learnNetwork_ParallelComputation( data = data, networkName = "AS_SignatureTFs", cores = 4, job = 3, path = projectPath )
learnNetwork_ParallelComputation( data = data, networkName = "AS_SignatureTFs", cores = 4, job = 4, path = projectPath )

#Combine individual sub-networks to a global network
combineSingleJobs( networkName = "AS_SignatureTFs", cores = 4, path = projectPath )

}
\seealso{
\code{\link{getComputationRange}}, \code{\link{combineSingleJobs}}, \code{\link{loadNetworkWithFilteringForSignificantPredictors}}
}
